@echo off
REM ============================================================================
REM MCP Filesystem Ultra - Vulnerability Scan
REM ============================================================================
REM Performs comprehensive security scanning for Go dependencies
REM
REM Usage: vulnerability_scan.bat [options]
REM Options:
REM   --verbose    Show detailed output
REM   --fix        Attempt to fix vulnerabilities
REM   --report     Generate security report
REM ============================================================================

setlocal enabledelayedexpansion
cd /d "%~dp0..\.."

echo.
echo ╔════════════════════════════════════════════════════════════════╗
echo ║  MCP Filesystem Ultra - Dependency Vulnerability Scanner       ║
echo ║  Version: 1.0 | Go Security Audit                              ║
echo ╚════════════════════════════════════════════════════════════════╝
echo.

set VERBOSE=0
set FIX=0
set REPORT=0
set REPORT_FILE=security_report_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%%time:~3,2%.txt

REM Parse arguments
:parse_args
if "%~1"=="" goto done_args
if "%~1"=="--verbose" set VERBOSE=1 && shift && goto parse_args
if "%~1"=="--fix" set FIX=1 && shift && goto parse_args
if "%~1"=="--report" set REPORT=1 && shift && goto parse_args
shift
goto parse_args

:done_args

echo [*] Scanning dependencies for vulnerabilities...
echo.

REM Step 1: Check for go.mod and go.sum integrity
echo [STEP 1] Validating module files...
if not exist go.mod (
    echo ❌ ERROR: go.mod not found
    exit /b 1
)
if not exist go.sum (
    echo ❌ WARNING: go.sum not found - regenerating...
    call go mod tidy
)
echo ✅ Module files validated
echo.

REM Step 2: List all dependencies
echo [STEP 2] Listing all dependencies...
if %VERBOSE%==1 (
    call go list -m all
) else (
    call go list -m all | find /c /v "" > nul && echo ✅ Dependencies listed
)
echo.

REM Step 3: Check for outdated packages
echo [STEP 3] Checking for outdated packages...
for /f "tokens=*" %%A in ('go list -u -m all ^| findstr "\["') do (
    echo ⚠️  OUTDATED: %%A
)
echo ✅ Outdated package check completed
echo.

REM Step 4: Run go mod verify
echo [STEP 4] Verifying module integrity...
call go mod verify >nul 2>&1
if !errorlevel! equ 0 (
    echo ✅ Module integrity verified
) else (
    echo ❌ Module integrity check failed
    if %FIX%==1 (
        echo [FIX] Running: go mod tidy
        call go mod tidy
    )
)
echo.

REM Step 5: Check for potential security issues with gosec (if installed)
echo [STEP 5] Checking for code vulnerabilities...
where gosec >nul 2>&1
if !errorlevel! equ 0 (
    echo ✅ gosec found - running analysis...
    call gosec ./...
) else (
    echo ⓘ gosec not installed - skipping static analysis
    echo   Install with: go install github.com/securego/gosec/v2/cmd/gosec@latest
)
echo.

REM Step 6: Check for vulnerable dependencies with nancy (if installed)
echo [STEP 6] Checking for known CVEs...
where nancy >nul 2>&1
if !errorlevel! equ 0 (
    echo ✅ nancy found - scanning for CVEs...
    call go list -json -m all ^| nancy sleuth
) else (
    echo ⓘ nancy not installed - skipping CVE check
    echo   Install with: go install github.com/sonatype-nexus-oss/nancy@latest
)
echo.

REM Step 7: Check license compliance
echo [STEP 7] Checking license compliance...
where go-licenses >nul 2>&1
if !errorlevel! equ 0 (
    echo ✅ go-licenses found - analyzing...
    call go-licenses report ./...
) else (
    echo ⓘ go-licenses not installed - skipping license check
    echo   Install with: go install github.com/google/go-licenses@latest
)
echo.

REM Step 8: Manual security checks
echo [STEP 8] Running manual security checks...
echo.
echo   Checking for unsafe imports...
findstr /r "\"unsafe\"" main.go core\*.go >nul 2>&1
if !errorlevel! equ 0 (
    echo   ❌ WARNING: unsafe package imported
) else (
    echo   ✅ No unsafe package imports
)

echo   Checking for hardcoded credentials...
findstr /i "password secret api_key token credentials" main.go core\*.go >nul 2>&1
if !errorlevel! equ 0 (
    echo   ⚠️  WARNING: Potential hardcoded secrets detected
    echo      Please review manually
) else (
    echo   ✅ No obvious hardcoded credentials
)

echo   Checking for proper error handling...
findstr "if err != nil" main.go >nul 2>&1
if !errorlevel! equ 0 (
    echo   ✅ Error handling patterns found
) else (
    echo   ❌ No error handling patterns found
)

echo.

REM Step 9: Generate report if requested
if %REPORT%==1 (
    echo [STEP 9] Generating security report...
    (
        echo. Security Scan Report
        echo. Generated: %date% %time%
        echo.
        echo. Dependency Information:
        go list -m all
        echo.
        echo. Module Verification:
        go mod verify
        echo.
    ) > %REPORT_FILE%
    echo ✅ Report saved to: %REPORT_FILE%
)

REM Step 10: Summary
echo.
echo ╔════════════════════════════════════════════════════════════════╗
echo ║  Security Scan Summary                                         ║
echo ╚════════════════════════════════════════════════════════════════╝
echo ✅ Basic vulnerability scan completed
echo.
echo Recommendations:
echo   1. Review any ⚠️  warnings above
echo   2. Update outdated packages: go get -u ./...
echo   3. Install security tools:
echo      - gosec (static analysis)
echo      - nancy (CVE detection)
echo      - go-licenses (license compliance)
echo   4. Run: go test ./tests/security
echo.
echo For detailed analysis, run with --verbose flag
echo.
endlocal
